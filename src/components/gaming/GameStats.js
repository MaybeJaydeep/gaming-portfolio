import React, { useState, useEffect } from 'react';\nimport { motion, useInView } from 'framer-motion';\nimport { gamingData } from '../../data';\n\nconst GameStats = ({ className = '' }) => {\n  const [animatedStats, setAnimatedStats] = useState({});\n  const ref = React.useRef(null);\n  const isInView = useInView(ref, { once: true, threshold: 0.2 });\n\n  // Calculate gaming statistics\n  const stats = {\n    totalTournaments: gamingData.tournaments.length,\n    tournamentsWon: gamingData.tournaments.filter(t => t.placement === 1).length,\n    totalPrizeEarned: gamingData.tournaments.reduce((sum, t) => sum + (t.prizeEarned || 0), 0),\n    averagePlacement: Math.round(\n      gamingData.tournaments.reduce((sum, t) => sum + t.placement, 0) / gamingData.tournaments.length\n    ),\n    totalAchievements: gamingData.achievements.length,\n    legendaryAchievements: gamingData.achievements.filter(a => a.rarity === 'legendary').length,\n    totalHoursPlayed: gamingData.gamingProfile.totalHoursPlayed,\n    favoriteGenres: gamingData.gamingProfile.favoriteGenres.length,\n    currentRank: gamingData.gamingProfile.currentRank,\n    winRate: Math.round((gamingData.tournaments.filter(t => t.placement <= 3).length / gamingData.tournaments.length) * 100)\n  };\n\n  // Animate counters when component comes into view\n  useEffect(() => {\n    if (isInView) {\n      const animateCounter = (key, targetValue, duration = 2000) => {\n        let startValue = 0;\n        const increment = targetValue / (duration / 16);\n        \n        const timer = setInterval(() => {\n          startValue += increment;\n          if (startValue >= targetValue) {\n            setAnimatedStats(prev => ({ ...prev, [key]: targetValue }));\n            clearInterval(timer);\n          } else {\n            setAnimatedStats(prev => ({ ...prev, [key]: Math.floor(startValue) }));\n          }\n        }, 16);\n      };\n\n      // Animate each stat with different durations for variety\n      animateCounter('totalTournaments', stats.totalTournaments, 1500);\n      animateCounter('tournamentsWon', stats.tournamentsWon, 1800);\n      animateCounter('totalPrizeEarned', stats.totalPrizeEarned, 2200);\n      animateCounter('totalAchievements', stats.totalAchievements, 1600);\n      animateCounter('totalHoursPlayed', stats.totalHoursPlayed, 2500);\n      animateCounter('winRate', stats.winRate, 2000);\n    }\n  }, [isInView, stats]);\n\n  const statCards = [\n    {\n      id: 'tournaments',\n      title: 'Tournaments Played',\n      value: animatedStats.totalTournaments || 0,\n      icon: 'üéØ',\n      color: 'text-cyan-400',\n      bgColor: 'bg-cyan-500/10',\n      borderColor: 'border-cyan-500/30',\n      description: 'Competitive events participated'\n    },\n    {\n      id: 'wins',\n      title: 'Tournament Wins',\n      value: animatedStats.tournamentsWon || 0,\n      icon: 'üèÜ',\n      color: 'text-yellow-400',\n      bgColor: 'bg-yellow-500/10',\n      borderColor: 'border-yellow-500/30',\n      description: 'First place finishes'\n    },\n    {\n      id: 'prize',\n      title: 'Prize Money',\n      value: `$${(animatedStats.totalPrizeEarned || 0).toLocaleString()}`,\n      icon: 'üí∞',\n      color: 'text-green-400',\n      bgColor: 'bg-green-500/10',\n      borderColor: 'border-green-500/30',\n      description: 'Total earnings from competitions'\n},\n    {\n      id: 'achievements',\n      title: 'Achievements',\n      value: animatedStats.totalAchievements || 0,\n      icon: 'üèÖ',\n      color: 'text-purple-400',\n      bgColor: 'bg-purple-500/10',\n      borderColor: 'border-purple-500/30',\n      description: 'Unlocked gaming milestones'\n    },\n    {\n      id: 'hours',\n      title: 'Hours Played',\n      value: (animatedStats.totalHoursPlayed || 0).toLocaleString(),\n      icon: '‚è±Ô∏è',\n      color: 'text-orange-400',\n      bgColor: 'bg-orange-500/10',\n      borderColor: 'border-orange-500/30',\n      description: 'Total gaming time invested'\n    },\n    {\n      id: 'winrate',\n      title: 'Win Rate',\n      value: `${animatedStats.winRate || 0}%`,\n      icon: 'üìä',\n      color: 'text-pink-400',\n      bgColor: 'bg-pink-500/10',\n      borderColor: 'border-pink-500/30',\n      description: 'Top 3 placement percentage'\n    }\n  ];\n\n  const progressBars = [\n    {\n      label: 'Tournament Performance',\n      value: stats.winRate,\n      maxValue: 100,\n      color: 'from-green-500 to-green-300',\n      icon: 'üéÆ'\n    },\n    {\n      label: 'Achievement Progress',\n      value: (stats.totalAchievements / 50) * 100, // Assuming 50 total possible achievements\n      maxValue: 100,\n      color: 'from-purple-500 to-purple-300',\n      icon: 'üèÜ'\n    },\n    {\n      label: 'Skill Level',\n      value: 85, // Based on current rank and performance\n      maxValue: 100,\n      color: 'from-cyan-500 to-cyan-300',\n      icon: '‚ö°'\n    }\n  ];\n\n  return (\n    <div ref={ref} className={`space-y-8 ${className}`}>\n      {/* Stats Grid */}\n      <motion.div\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={isInView ? { opacity: 1, y: 0 } : {}}\n        transition={{ duration: 0.6 }}\n      >\n        {statCards.map((stat, index) => (\n          <StatCard\n            key={stat.id}\n            stat={stat}\n            index={index}\n            isInView={isInView}\n          />\n        ))}\n      </motion.div>\n\n      {/* Progress Bars Section */}\n      <motion.div\n        className=\"space-y-6\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={isInView ? { opacity: 1, y: 0 } : {}}\n        transition={{ duration: 0.6, delay: 0.4 }}\n      >\n        <h3 className=\"text-xl font-bold text-green-400 mb-4 flex items-center gap-2\">\n          <span>üìà</span>\n          Performance Metrics\n        </h3>\n        \n        <div className=\"space-y-4\">\n          {progressBars.map((bar, index) => (\n            <ProgressBar\n              key={bar.label}\n              bar={bar}\n              index={index}\n              isInView={isInView}\n            />\n          ))}\n        </div>\n      </motion.div>\n\n      {/* Additional Stats */}\n      <motion.div\n        className=\"grid md:grid-cols-2 gap-6\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={isInView ? { opacity: 1, y: 0 } : {}}\n        transition={{ duration: 0.6, delay: 0.6 }}\n      >\n        {/* Rank Information */}\n        <div className=\"bg-gray-800/50 rounded-lg p-6 border border-green-500/20\">\n          <h4 className=\"text-lg font-semibold text-cyan-400 mb-4 flex items-center gap-2\">\n            <span>üéñÔ∏è</span>\n            Current Ranking\n          </h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-300\">Current Rank:</span>\n              <span className=\"text-yellow-400 font-bold\">{stats.currentRank}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-300\">Average Placement:</span>\n              <span className=\"text-green-400 font-bold\">#{stats.averagePlacement}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-300\">Legendary Achievements:</span>\n              <span className=\"text-purple-400 font-bold\">{stats.legendaryAchievements}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Gaming Profile Summary */}\n        <div className=\"bg-gray-800/50 rounded-lg p-6 border border-green-500/20\">\n          <h4 className=\"text-lg font-semibold text-cyan-400 mb-4 flex items-center gap-2\">\n            <span>üë§</span>\n            Gaming Profile\n          </h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-300\">Gamertag:</span>\n              <span className=\"text-green-400 font-bold\">{gamingData.gamingProfile.gamertag}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-300\">Favorite Genres:</span>\n              <span className=\"text-cyan-400 font-bold\">{stats.favoriteGenres}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-300\">Years Active:</span>\n              <span className=\"text-yellow-400 font-bold\">\n                {new Date().getFullYear() - new Date(gamingData.gamingProfile.startDate).getFullYear()}\n              </span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\n// Individual Stat Card Component\nconst StatCard = ({ stat, index, isInView }) => {\n  return (\n    <motion.div\n      className={`\n        relative p-6 rounded-lg border-2 transition-all duration-500\n        ${stat.bgColor} ${stat.borderColor} hover:scale-105\n      `}\n      initial={{ opacity: 0, y: 50, rotateX: -15 }}\n      animate={isInView ? {\n        opacity: 1,\n        y: 0,\n        rotateX: 0,\n        boxShadow: '0 10px 30px rgba(0, 255, 255, 0.2)'\n      } : {}}\n      transition={{\n        duration: 0.8,\n        delay: index * 0.1,\n        type: \"spring\",\n        stiffness: 100\n      }}\n      whileHover={{\n        scale: 1.05,\n        boxShadow: '0 15px 40px rgba(0, 255, 255, 0.4)'\n      }}\n    >\n      {/* Glow effect */}\n      <div className=\"absolute inset-0 rounded-lg bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300\" />\n      \n      <div className=\"relative z-10 text-center space-y-3\">\n        <div className=\"text-3xl mb-2\">{stat.icon}</div>\n        <div className={`text-3xl font-bold ${stat.color} mb-1`}>\n          {stat.value}\n        </div>\n        <div className=\"text-sm font-medium text-gray-300\">\n          {stat.title}\n        </div>\n        <div className=\"text-xs text-gray-400 opacity-80\">\n          {stat.description}\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\n// Progress Bar Component\nconst ProgressBar = ({ bar, index, isInView }) => {\n  return (\n    <motion.div\n      className=\"space-y-2\"\n      initial={{ opacity: 0, x: -50 }}\n      animate={isInView ? { opacity: 1, x: 0 } : {}}\n      transition={{ duration: 0.6, delay: 0.6 + (index * 0.2) }}\n    >\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-2\">\n          <span>{bar.icon}</span>\n          <span className=\"text-sm font-medium text-gray-300\">{bar.label}</span>\n        </div>\n        <span className=\"text-sm text-cyan-400 font-bold\">\n          {Math.round(bar.value)}%\n        </span>\n      </div>\n      \n      <div className=\"relative h-3 bg-gray-800 rounded-full overflow-hidden\">\n        <motion.div\n          className={`absolute inset-y-0 left-0 bg-gradient-to-r ${bar.color} rounded-full`}\n          initial={{ width: 0 }}\n          animate={isInView ? { width: `${bar.value}%` } : {}}\n          transition={{ duration: 1.5, delay: 0.8 + (index * 0.2), ease: \"easeOut\" }}\n        />\n        \n        {/* Glow effect */}\n        <motion.div\n          className={`absolute inset-y-0 left-0 bg-gradient-to-r ${bar.color} rounded-full opacity-50 blur-sm`}\n          initial={{ width: 0 }}\n          animate={isInView ? { width: `${bar.value}%` } : {}}\n          transition={{ duration: 1.5, delay: 0.8 + (index * 0.2), ease: \"easeOut\" }}\n        />\n      </div>\n    </motion.div>\n  );\n};\n\nexport default GameStats;"
