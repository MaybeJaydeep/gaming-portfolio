import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst AchievementBadge = ({ \n  achievement, \n  size = 'medium', \n  showTooltip = true, \n  unlocked = true,\n  onClick,\n  className = '' \n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [showUnlockAnimation, setShowUnlockAnimation] = useState(false);\n\n  // Size configurations\n  const sizeConfig = {\n    small: {\n      container: 'w-12 h-12',\n      icon: 'text-lg',\n      tooltip: 'text-xs',\n      badge: 'text-xs px-1 py-0.5'\n    },\n    medium: {\n      container: 'w-16 h-16',\n      icon: 'text-2xl',\n      tooltip: 'text-sm',\n      badge: 'text-xs px-2 py-1'\n    },\n    large: {\n      container: 'w-20 h-20',\n      icon: 'text-3xl',\n      tooltip: 'text-base',\n      badge: 'text-sm px-2 py-1'\n    }\n  };\n\n  // Rarity configurations\n  const rarityConfig = {\n    common: {\n      colors: {\n        border: 'border-gray-500',\n        bg: 'bg-gray-500/20',\n        text: 'text-gray-400',\n        glow: 'shadow-gray-500/50'\n      },\n      label: 'COMMON',\n      particles: 3\n    },\n    rare: {\n      colors: {\n        border: 'border-blue-500',\n        bg: 'bg-blue-500/20',\n        text: 'text-blue-400',\n        glow: 'shadow-blue-500/50'\n      },\n      label: 'RARE',\n      particles: 5\n    },\n    epic: {\n      colors: {\n        border: 'border-purple-500',\n        bg: 'bg-purple-500/20',\n        text: 'text-purple-400',\n        glow: 'shadow-purple-500/50'\n      },\n      label: 'EPIC',\n      particles: 8\n    },\n    legendary: {\n      colors: {\n        border: 'border-yellow-500',\n        bg: 'bg-yellow-500/20',\n        text: 'text-yellow-400',\n        glow: 'shadow-yellow-500/50'\n      },\n      label: 'LEGENDARY',\n      particles: 12\n    }\n  };\n\n  const currentSize = sizeConfig[size];\n  const currentRarity = rarityConfig[achievement.rarity] || rarityConfig.common;\n  const handleClick = () => {\n    if (onClick) {\n      onClick(achievement);\n    }\n    if (unlocked && achievement.rarity === 'legendary') {\n      setShowUnlockAnimation(true);\n      setTimeout(() => setShowUnlockAnimation(false), 2000);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      {/* Achievement Badge */}\n      <motion.div\n        className={`\n          relative ${currentSize.container} rounded-lg border-2 cursor-pointer\n          transition-all duration-300 flex items-center justify-center\n          ${unlocked \n            ? `${currentRarity.colors.border} ${currentRarity.colors.bg} hover:scale-110` \n            : 'border-gray-700 bg-gray-800/50 grayscale'\n          }\n          ${isHovered && unlocked ? `shadow-lg ${currentRarity.colors.glow}` : ''}\n        `}\n        whileHover={unlocked ? { scale: 1.1, rotate: 5 } : {}}\n        whileTap={unlocked ? { scale: 0.95 } : {}}\n        onClick={handleClick}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        initial={{ opacity: 0, scale: 0 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.5, type: \"spring\", stiffness: 200 }}\n      >\n        {/* Background glow effect */}\n        {unlocked && (\n          <motion.div\n            className={`absolute inset-0 rounded-lg ${currentRarity.colors.bg} opacity-50 blur-sm`}\n            animate={isHovered ? { scale: 1.2, opacity: 0.8 } : { scale: 1, opacity: 0.3 }}\n            transition={{ duration: 0.3 }}\n          />\n        )}\n\n        {/* Achievement Icon */}\n        <div className={`relative z-10 ${currentSize.icon} ${unlocked ? currentRarity.colors.text : 'text-gray-600'}`}>\n          {achievement.icon}\n        </div>\n\n        {/* Rarity indicator */}\n        {unlocked && (\n          <div className={`\n            absolute -top-2 -right-2 ${currentSize.badge} rounded-full\n            ${currentRarity.colors.bg} ${currentRarity.colors.border} border\n            ${currentRarity.colors.text} font-bold\n          `}>\n            {currentRarity.label.charAt(0)}\n          </div>\n        )}\n\n        {/* Lock overlay for locked achievements */}\n        {!unlocked && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-gray-900/80 rounded-lg\">\n            <div className=\"text-gray-500 text-sm\">üîí</div>\n          </div>\n        )}\n\n        {/* Particle effects for legendary achievements */}\n        {unlocked && achievement.rarity === 'legendary' && isHovered && (\n          <div className=\"absolute inset-0 pointer-events-none\">\n            {[...Array(currentRarity.particles)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-1 h-1 bg-yellow-400 rounded-full\"\n                initial={{\n                  x: '50%',\n                  y: '50%',\n                  scale: 0,\n                  opacity: 1\n                }}\n                animate={{\n                  x: `${50 + (Math.random() - 0.5) * 200}%`,\n                  y: `${50 + (Math.random() - 0.5) * 200}%`,\n                  scale: [0, 1, 0],\n                  opacity: [1, 1, 0]\n                }}\n                transition={{\n                  duration: 1.5,\n                  delay: i * 0.1,\n                  repeat: Infinity,\n                  repeatDelay: 2\n                }}\n              />\n            ))}\n          </div>\n        )}\n      </motion.div>\n\n      {/* Tooltip */}\n      <AnimatePresence>\n        {showTooltip && isHovered && unlocked && (\n          <motion.div\n            className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 z-50\"\n            initial={{ opacity: 0, y: 10, scale: 0.8 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: 10, scale: 0.8 }}\n            transition={{ duration: 0.2 }}\n          >\n            <div className={`\n              bg-gray-900 border-2 ${currentRarity.colors.border} rounded-lg p-3 min-w-48\n              ${currentSize.tooltip} shadow-xl\n            `}>\n              {/* Tooltip arrow */}\n              <div className={`\n                absolute top-full left-1/2 transform -translate-x-1/2\n                border-l-4 border-r-4 border-t-4 border-transparent\n                ${currentRarity.colors.border.replace('border-', 'border-t-')}\n              `} />\n              \n              {/* Achievement details */}\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className={`font-bold ${currentRarity.colors.text}`}>\n                    {achievement.title}\n                  </h4>\n                  <span className={`\n                    text-xs px-2 py-1 rounded-full\n                    ${currentRarity.colors.bg} ${currentRarity.colors.border} border\n                    ${currentRarity.colors.text}\n                  `}>\n                    {currentRarity.label}\n                  </span>\n                </div>\n                \n                <p className=\"text-gray-300 text-xs leading-relaxed\">\n                  {achievement.description}\n                </p>\n                \n                {achievement.unlockedDate && (\n                  <div className=\"flex items-center justify-between text-xs text-gray-400 pt-2 border-t border-gray-700\">\n                    <span>Unlocked:</span>\n                    <span>{formatDate(achievement.unlockedDate)}</span>\n                  </div>\n                )}\n                \n                {achievement.xpReward && (\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-400\">XP Reward:</span>\n                    <span className=\"text-green-400 font-bold\">+{achievement.xpReward}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Unlock Animation */}\n      <AnimatePresence>\n        {showUnlockAnimation && (\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            {/* Radial burst effect */}\n            <motion.div\n              className=\"absolute inset-0 rounded-full border-4 border-yellow-400\"\n              initial={{ scale: 0, opacity: 1 }}\n              animate={{ scale: 3, opacity: 0 }}\n              transition={{ duration: 1, ease: \"easeOut\" }}\n            />\n            \n            {/* Text popup */}\n            <motion.div\n              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n              initial={{ opacity: 0, y: 0, scale: 0.5 }}\n              animate={{ opacity: 1, y: -20, scale: 1 }}\n              exit={{ opacity: 0, y: -40, scale: 0.5 }}\n              transition={{ duration: 1.5 }}\n            >\n              <div className=\"bg-yellow-500 text-black px-3 py-1 rounded-full text-xs font-bold whitespace-nowrap\">\n                üèÜ LEGENDARY UNLOCKED!\n              </div>\n            </motion.div>\n            \n            {/* Sparkle effects */}\n            {[...Array(8)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-2 h-2 bg-yellow-400 rounded-full\"\n                style={{\n                  left: '50%',\n                  top: '50%',\n                  transform: 'translate(-50%, -50%)'\n                }}\n                initial={{ scale: 0, opacity: 1 }}\n                animate={{\n                  x: Math.cos((i * Math.PI * 2) / 8) * 40,\n                  y: Math.sin((i * Math.PI * 2) / 8) * 40,\n                  scale: [0, 1, 0],\n                  opacity: [1, 1, 0]\n                }}\n                transition={{\n                  duration: 1.5,\n                  delay: 0.2,\n                  ease: \"easeOut\"\n                }}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default AchievementBadge;"
